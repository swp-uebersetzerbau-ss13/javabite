import org.ajoberstar.gradle.git.tasks.*
import org.eclipse.jgit.api.*
import org.eclipse.jgit.api.errors.*
import org.gradle.api.tasks.*

apply plugin: 'eclipse'

/*
 * projects
 */
project(':javabite-compiler') {
	apply plugin:'application'
	
	jar {
		manifest { attributes 'Main-Class': 'swp_compiler_ss13.javabite.MainDispatcher' }
		destinationDir = file('../bin')
		from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	}
	mainClassName = 'swp_compiler_ss13.javabite.MainDispatcher'
	dependencies {
		compile 'org.tinyjee.jgraphx:jgraphx:1.10.4.1'
		compile project(':jclasslib'), project(':javabite-common'), project(':javabite-lexer'), project(':javabite-parser'), project(':javabite-code-gen'), project(':javabite-backend'), project(':javabite-semantic')
	}
}
configure(javabiteProjects()) {
	apply plugin: 'java'
	apply plugin: 'eclipse'

	sourceCompatibility = 1.7
	version = '0.2'
	ext.title = 'Javabite'
	jar {
		manifest {
			attributes 'Implementation-Title': title, 'Implementation-Version': version
		}
	}
	repositories { mavenCentral() }
	dependencies {
		compile 'org.apache.commons:commons-io:1.3.2'
		compile 'commons-lang:commons-lang:2.6'
		compile 'org.slf4j:slf4j-simple:1.7.5'
		compile 'org.tinyjee.jgraphx:jgraphx:1.10.4.1'
		testCompile 'junit:junit:4.11'
		testCompile 'junit-addons:junit-addons:1.4'
		testCompile 'org.mockito:mockito-all:1.8.4'
	}

	test { systemProperties 'org.slf4j.simpleLogger.defaultLogLevel': 'debug' }
}
project(':common'){
	sourceSets {
		main { java { srcDir 'interfaces/src' } }
		test { java { srcDir 'interfaces/test' } }
	}
}
project(':jclasslib') {
	sourceSets {
		main { java { srcDir 'src' } }
	}

	dependencies {
		runtime files('lib-compile/antnbm.jar',
				'lib-compile/docbook.zip',
				'lib-compile/java.jar',
				'lib-compile/openide.jar')
	}
}
project(':javabite-lexer') {
	dependencies {
		compile project(':javabite-common')
		testCompile project(':common').sourceSets.test.output
	}
}
project(':javabite-parser') {
	dependencies { compile project(':javabite-common') }
}
project(':javabite-semantic') {
	dependencies { compile project(':javabite-common') }
}
project(':javabite-code-gen') {
	dependencies { compile project(':javabite-common') }
}
project(':javabite-backend') {
	dependencies { compile project(':javabite-common') }
}
project(':javabite-common') {
	dependencies { compile project(':common') }
}
/*
 * main tasks
 */
task clean(type: Delete, dependsOn: javabiteProjects().clean) {
	delete fileTree('bin')
}
task buildCompiler(type: Copy, dependsOn: [clean, ':javabite-compiler:jar']) {
}
task buildCompilerWithFuc(type: Copy, dependsOn: [clean, ':fuc:dist',':javabite-compiler:jarIncludingFuc']) {
	from 'javabite-compiler/build/libs'
	into 'bin'
	include 'javabite-compiler-0.1-standalone.jar'
	rename { String fileName ->
		fileName.replace('-standalone', '')
	}
}
task buildModules(type: Copy, dependsOn: [clean, basicJavabiteProjects().jar]) {
	basicJavabiteProjects().each { project ->
		from ("${project.name}/build/libs") {
			include 'javabite-*.jar'
		}
	}
	into 'bin'
}
task buildForCrossTest(dependsOn: buildModules)
task buildAll(dependsOn: [buildModules, buildCompiler])
task run(type: JavaExec) {
	main = 'swp_compiler_ss13.javabite.MainDispatcher'
	classpath = files('bin/javabite-compiler-0.2.jar')
}
task runWithBuild(type: JavaExec, dependsOn: buildCompiler) {
	main = 'swp_compiler_ss13.javabite.MainDispatcher'
	classpath = files('bin/javabite-compiler-0.2.jar')
}
task runAllModules(type: JavaExec) {
	main = 'swp_compiler_ss13.javabite.MainDispatcher'
	classpath = files('bin/javabite-compiler-0.2.jar')
	classpath += fucJarFiles()
	println classpath*.toString()
}
/*
 * FUC
 */
task cloneFuc(type: GitClone) {
	def destination = file('fuc')
	uri = "https://github.com/swp-uebersetzerbau-ss13/fuc.git"
	destinationPath = destination
	bare = false
	enabled = !destination.exists()
}
task setupFuc(type: GitSubmoduleInit, dependsOn: cloneFuc) {
	def repo = file('fuc')
	repoPath = repo
	modules = ['code/common']
	enabled = !repo.exists()
}
task pullFuc(type: GitPull, dependsOn: setupFuc) {
	repoPath = file('fuc')
}
task updateFuc(type: GitSubmoduleUpdate, dependsOn: pullFuc) {
	repoPath = file('fuc')
	modules = ['code/common']
}
if (file('fuc').exists()) {
	project(':fuc') {
		ant.importBuild 'code/build.xml'
		dist.dependsOn(updateFuc)
	}
	task buildFuc(dependsOn: ':fuc:dist') {
	}
}
/*
 * configuration helpers
 */
def javabiteProjects() {
	subprojects.findAll { it.name != 'fuc' && it.name != 'crosstest' }
}
def basicJavabiteProjects() {
	[project('javabite-common'),project('javabite-lexer'),project('javabite-parser'),project('javabite-semantic'),project('javabite-code-gen'),project('javabite-backend')]
}
def fucJarFiles() {
	files('fuc/code/dist/FUC-SymbolTable.jar','fuc/code/dist/FUC-AST.jar',
		'fuc/code/dist/FUC-Lexer.jar','fuc/code/dist/FUC-Parser.jar',
		'fuc/code/dist/FUC-Semantic-Analyser.jar','fuc/code/dist/FUC-IRGen.jar',
		'fuc/code/dist/FUC-Backend.jar','fuc/code/dist/lib/log4j-1.2.17.jar',
		'fuc/code/dist/FUC-Backend.jar')
}
/*
 * build helpers
 */
task wrapper(type: Wrapper) {
	gradleVersion = '1.6'
}